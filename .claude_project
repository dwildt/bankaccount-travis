{
  "name": "bankaccount-travis",
  "description": "Bank Account Management System - Java Spring Boot application with Maven build, Travis CI integration, and comprehensive test automation. Demonstrates TDD and object-oriented design principles.",
  "requirements": [
    "Java 8+ with Spring Boot framework",
    "Maven for dependency management and build",
    "JUnit for unit testing",
    "In-memory repository for account storage",
    "REST API endpoints for account operations"
  ],
  "sourceRoot": "src/main/java",
  "testRoot": "src/test/java",
  "buildSystem": "maven",
  "entryPoint": "src/main/java/com/danielwildt/api/WildtechBank.java",
  "keyFeatures": [
    "Bank account creation and management",
    "Balance checking and withdrawal operations", 
    "In-memory account repository pattern",
    "REST API with Spring Boot",
    "Comprehensive unit test coverage",
    "Travis CI continuous integration",
    "Heroku deployment support"
  ],
  "projectStructure": {
    "src/main/java/com/danielwildt/": "Main source code directory",
    "src/main/java/com/danielwildt/api/": "REST API controllers and main application",
    "src/main/java/com/danielwildt/model/": "Domain models (BankAccount)",
    "src/main/java/com/danielwildt/db/": "Repository pattern implementation",
    "src/main/java/com/danielwildt/console/": "Console application interface",
    "src/test/java/": "Unit tests following same package structure",
    "pom.xml": "Maven project configuration",
    "build.xml": "Ant build configuration (alternative)"
  },
  "codeStyle": {
    "language": "Java",
    "framework": "Spring Boot 2.1.0",
    "testFramework": "JUnit 4.12",
    "buildTool": "Maven 3.x",
    "javaVersion": "1.8"
  },
  "apiEndpoints": [
    "GET /balance?name={accountName} - Check account balance",
    "POST /add?name={accountName}&balance={amount} - Create account",
    "POST /withdraw?name={accountName}&value={amount} - Withdraw from account"
  ],
  "conventions": {
    "packageNaming": "com.danielwildt.{module}",
    "classNaming": "PascalCase for classes, camelCase for methods",
    "testNaming": "TestClass naming convention with descriptive method names",
    "repositoryPattern": "Interface + InMemory implementation"
  }
}